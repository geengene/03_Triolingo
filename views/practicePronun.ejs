<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles/practicePronun.css" />
    <title>Pronunciation</title>
  </head>
  <body>
    <div class="card">
      <h1 id="wordText"><%= words[currentIndex].text %></h1>

      <label for="voiceSelect">Select Voice:</label>
      <select id="voiceSelect"></select>
      <br /><br />
      <button id="playBtn">Play</button>

      <audio id="audiourl" controls>
        <source src="<%= words[currentIndex].audiourl %>" type="audio/mpeg" />
      </audio>
      <!-- TODO: implement speech synthesis -->
      <h2 id="romaji"><%= romajiArray.split(',')[currentIndex] %></h2>
      <form id="inputForm" method="post" action="/pronunciation">
        <h2>Input:</h2>
        <input
          id="recordedInput"
          name="recordedInput"
          type="text"
          value=""
          readonly
        />
        <input
          type="text"
          name="wordsForm"
          id="wordsForm"
          value="<%= JSON.stringify(words) %>"
          hidden
        />
        <input
          type="text"
          name="romajiArrayForm"
          id="romajiArrayForm"
          value="<%= romajiArray %>"
          hidden
        />
        <input
          type="text"
          name="currentIndexForm"
          id="currentIndexForm"
          value="<%= currentIndex %>"
          hidden
        />
        <input
          type="text"
          name="wordsArrayForm"
          id="wordsArrayForm"
          value=""
          hidden
        />
        <input id="submitBtn" hidden="true" type="submit" />
      </form>
    </div>
    <div class="buttons">
      <button id="recordBtn">start recording</button>
      <% if (nextBtn === true) { %>
      <button id="nextBtn">Next</button>
      <% } else { %>
      <button id="nextBtn" hidden>Next</button>
      <% } %>
    </div>
  </body>

  <script>
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    const SpeechRecognitionEvent =
      window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;
    let currentIndex = <%= currentIndex %>;
    const words = <%- JSON.stringify(words) %>;
    console.log("words:", words)
    const wordsArray = []
    words.forEach((word) => {
      wordsArray.push(word.text);
    });
    console.log("wordsArray:", wordsArray)
    const romajiArray = "<%= romajiArray %>"

    const recognition = new SpeechRecognition();
    const SpeechGrammarList =
      window.SpeechGrammarList || window.webkitSpeechGrammarList;
    if (SpeechGrammarList) {
      const speechRecognitionList = new SpeechGrammarList();
      const grammar = '#JSGF V1.0; grammar wordsArray; public <word> = ' + wordsArray.join(' | ') + ' ;'
      speechRecognitionList.addFromString(grammar, 1);
      recognition.grammars = speechRecognitionList;
    }
    recognition.continuous = false;
    recognition.lang = 'ja-JP';
    recognition.interimResults = false;
    recognition.maxAlternatives = 0;

    document.getElementById("recordBtn").onclick = function() {
      recognition.start();
      console.log('Ready to receive a command.');
    }

    const recordedInput = document.getElementById("recordedInput")
    const submitBtn = document.getElementById("submitBtn")

    recognition.onresult = async function(event) {
      var input = event.results[0][0].transcript;
      recordedInput.value = input;
      console.log('Confidence: ' + event.results[0][0].confidence);
      document.getElementById("currentIndexForm").value = currentIndex
      document.getElementById("wordsArrayForm").value = wordsArray
      submitBtn.click();
    }

    document.getElementById("nextBtn").onclick = function () {
      currentIndex = currentIndex + 1
      document.getElementById("currentIndexForm").value = currentIndex
      document.getElementById("wordText").innerText = words[currentIndex].text
      document.getElementById("audiourl").src = words[currentIndex].audiourl
      document.getElementById("romaji").innerText = romajiArray.split(',')[currentIndex]
      document.getElementById('nextBtn').classList.add("hidden")
    }

    recognition.onspeechend = function() {
      recognition.stop();
    }
    recognition.onnomatch = function(event) {
      recordedInput.textContent = "I didn't recognise that word.";
    }
    recognition.onerror = function(event) {
      recordedInput.textContent = 'Error occurred in recognition: ' + event.error;
    }

    const textInput = document.getElementById("wordText");
    const voiceSelect = document.getElementById("voiceSelect");
    const playBtn = document.getElementById("playBtn");
    let voices = [];

    function populateVoices() {
        voices = speechSynthesis.getVoices();
        voiceSelect.innerHTML = ""; // Clear previous options

        // Filter voices by language (Change 'en' to your target language code)
        const lang = "ja";
        const filteredVoices = voices.filter(voice => voice.lang.startsWith(lang));

        filteredVoices.forEach(voice => {
            const option = document.createElement("option");
            option.value = voice.name;
            option.textContent = `${voice.name} (${voice.lang})`;
            voiceSelect.appendChild(option);
        });
    }

    // Populate voices when they change
    speechSynthesis.onvoiceschanged = populateVoices;

    playBtn.addEventListener("click", () => {
        const text = textInput.innerText;
        const utterance = new SpeechSynthesisUtterance(text);

        // Set selected voice
        const selectedVoice = voiceSelect.value;
        utterance.voice = voices.find(voice => voice.name === selectedVoice);

        speechSynthesis.speak(utterance);
    });

    // Initial voice population
    populateVoices();
  </script>
</html>
