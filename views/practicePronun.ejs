<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&text=mic,arrow_forward,play_arrow,home"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/styles/practicePronun.css" />
    <title>Pronunciation</title>
  </head>
  <body>
    <div class="homeBtn">
      <a href="/" style="text-decoration: none">
        <button id="home">
          <span class="material-symbols-outlined"> home </span>
        </button>
      </a>
    </div>
    <div class="mainContent">
      <div class="card">
        <h1 id="wordText"><%= words[currentIndex].text %></h1>

        <div id="nextReveal">
          <h3 id="wordTranslation"><%= words[currentIndex].translation %></h3>
          <!-- <audio id="audiourl">
            <source
              src="<%= words[currentIndex].audiourl %>"
              type="audio/mpeg"
            />
          </audio> -->
          <!-- <button onclick="playPause()" id="play">
            <span class="material-symbols-outlined"> play_arrow </span>
          </button> -->
          <h2 id="romaji">
            Pronunciation: <%= romajiArray.split(',')[currentIndex] %>
          </h2>
          <select id="voiceSelect" hidden></select>
          <button id="playBtn">
            <span class="material-symbols-outlined"> play_arrow </span>
          </button>
          <p id="soundsLike">You said: <%= hiragana %></p>
        </div>
        <div id="nextRevealHolder"></div>

        <form id="inputForm" method="post" action="/pronunciation">
          <h2>Input:</h2>
          <input
            id="recordedInput"
            name="recordedInput"
            type="text"
            value=""
            readonly
          />
          <input
            type="text"
            name="wordsForm"
            id="wordsForm"
            value="<%= JSON.stringify(words) %>"
            hidden
          />
          <input
            type="text"
            name="romajiArrayForm"
            id="romajiArrayForm"
            value="<%= romajiArray %>"
            hidden
          />
          <input
            type="text"
            name="currentIndexForm"
            id="currentIndexForm"
            value="<%= currentIndex %>"
            hidden
          />
          <input
            type="text"
            name="wordsArrayForm"
            id="wordsArrayForm"
            value=""
            hidden
          />
          <input
            type="text"
            name="tryCount"
            id="tryCount"
            value="<%= tryCount %>"
            hidden
          />
          <input id="submitBtn" hidden="true" type="submit" />
        </form>
      </div>
      <div class="buttons">
        <button id="recordBtn">
          <span class="material-symbols-outlined"> mic </span>
        </button>
        <button id="nextBtn">
          <span class="material-symbols-outlined"> arrow_forward </span>
        </button>
      </div>

      <div id="modalBackground" class="modalBackground">
        <div class="modalContent">
          <p>You have completed a lesson. Well done!!</p>
          <div class="finishBtns">
            <form action="/pronunciation/finish" method="post">
              <button
                type="submit"
                name="modalButton"
                value="anotherModal"
                id="anotherModal"
              >
                Another round
              </button>
              <button
                type="submit"
                name="modalButton"
                value="exitModal"
                id="exitModal"
              >
                Exit
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </body>

  <script>
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    const SpeechRecognitionEvent =
      window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;
    let currentIndex = <%= currentIndex %>;
    const words = <%- JSON.stringify(words) %>;
    console.log("words:", words)
    const wordsArray = []
    words.forEach((word) => {
      wordsArray.push(word.text);
    });
    console.log("wordsArray:", wordsArray)
    const romajiArray = "<%= romajiArray %>"

    const tryCount = <%= tryCount %>
    const check = <%= check %>
    console.log(tryCount, check)
    if (tryCount === 2 && check == true) {
      document.getElementById("nextReveal").style.display = "flex"
      document.getElementById("nextRevealHolder").style.display = "none"
      document.getElementById("nextBtn").style.display = "block"
      document.getElementById("recordBtn").style.display = "none"
      document.body.style.backgroundColor = 'rgba(61, 180, 66, 0.8)';
      console.log("correct")
    } else if (tryCount === 2 && check == false) {
      document.getElementById("nextReveal").style.display = "flex"
      document.getElementById("nextRevealHolder").style.display = "none"
      document.getElementById("nextBtn").style.display = "block"
      document.getElementById("recordBtn").style.display = "none"
      document.body.style.backgroundColor = 'rgba(200, 52, 52, 0.8)';
      console.log("all wrong")
    } else if (tryCount < 2 && check == false){
      document.getElementById("nextReveal").style.display = "none"
      document.getElementById("nextRevealHolder").style.display = "block"
      document.getElementById("nextBtn").style.display = "none"
      document.getElementById("recordBtn").style.display = "block"
      document.body.style.backgroundColor = 'rgba(200, 52, 52, 0.8)';
      console.log("mid wrong")
    } else {
      document.getElementById("nextReveal").style.display = "none"
      document.getElementById("nextRevealHolder").style.display = "block"
      document.getElementById("nextBtn").style.display = "none"
      document.getElementById("recordBtn").style.display = "block"
      document.body.style.backgroundColor = 'rgba(241, 229, 229, 0.8)';
      console.log("first word")
    }

    const recognition = new SpeechRecognition();
    const SpeechGrammarList =
      window.SpeechGrammarList || window.webkitSpeechGrammarList;
    if (SpeechGrammarList) {
      const speechRecognitionList = new SpeechGrammarList();
      const grammar = '#JSGF V1.0; grammar wordsArray; public <word> = ' + wordsArray.join(' | ') + ' ;'
      speechRecognitionList.addFromString(grammar, 1);
      recognition.grammars = speechRecognitionList;
    }
    recognition.continuous = false;
    recognition.lang = 'ja-JP';
    recognition.interimResults = false;
    recognition.maxAlternatives = 0;

    document.getElementById("recordBtn").onclick = function() {
      recognition.start();
      console.log('Ready to receive a command.');
    }

    const recordedInput = document.getElementById("recordedInput")
    const submitBtn = document.getElementById("submitBtn")

    var modal= document.getElementById("modalBackground")
    var exitModal = document.getElementById("exitModal")
    exitModal.onclick = function() {
      modal.style.display = "none";
    }
    recognition.onresult = async function(event) {
      var input = event.results[0][0].transcript;
      recordedInput.value = input;
      console.log('Confidence: ' + event.results[0][0].confidence);
      document.getElementById("currentIndexForm").value = currentIndex
      document.getElementById("wordsArrayForm").value = wordsArray
      submitBtn.click();
    }

    document.getElementById("nextBtn").onclick = function () {
      currentIndex = (currentIndex + 1) % (words.length + 1);
      if (currentIndex <= words.length - 1) {
        document.getElementById("currentIndexForm").value = currentIndex
        document.getElementById("wordText").innerText = words[currentIndex].text
        //document.getElementById("audiourl").src = words[currentIndex].audiourl
        document.getElementById("romaji").innerText = romajiArray.split(',')[currentIndex]
        document.getElementById('nextBtn').style.display = "none"
        document.getElementById("nextReveal").style.display = "none"
        document.getElementById("nextRevealHolder").style.display = "block"
        document.getElementById("recordBtn").style.display = "block"
        document.body.style.backgroundColor = 'white';
      } else {
        modal.style.display = "block"
      }
    }

    recognition.onspeechend = function() {
      recognition.stop();
    }
    recognition.onnomatch = function(event) {
      recordedInput.textContent = "I didn't recognise that word.";
    }
    recognition.onerror = function(event) {
      recordedInput.textContent = 'Error occurred in recognition: ' + event.error;
    }

    const textInput = document.getElementById("wordText");
    const voiceSelect = document.getElementById("voiceSelect");
    const playBtn = document.getElementById("playBtn");
    let voices = [];

    function populateVoices() {
        voices = speechSynthesis.getVoices();
        voiceSelect.innerHTML = ""; // Clear previous options

        // Filter voices by language (Change 'en' to your target language code)
        const lang = "ja";
        const desiredVoiceName = "Google 日本語";
        const desiredVoice = voices.find(voice => voice.lang.startsWith(lang) && voice.name === desiredVoiceName);

        if (desiredVoice) {
            const option = document.createElement("option");
            option.value = desiredVoice.name;
            option.textContent = `${desiredVoice.name} (${desiredVoice.lang})`;
            voiceSelect.appendChild(option);
          }
        }

    // Populate voices when they change
    speechSynthesis.onvoiceschanged = populateVoices;

    playBtn.addEventListener("click", () => {
        const text = textInput.innerText;
        const utterance = new SpeechSynthesisUtterance(text);

        // Set selected voice
        const selectedVoice = voiceSelect.value;
        utterance.voice = voices.find(voice => voice.name === selectedVoice);

        speechSynthesis.speak(utterance);
    });

    // Initial voice population
    populateVoices();

    let audio = document.getElementById("audiourl");
    let play = document.getElementById("play")

    function playPause() {
      audio.play()
    }
  </script>
</html>
